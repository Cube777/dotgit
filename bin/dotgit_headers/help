#! /bin/bash

# Part of dotgit

function phelp
{
	echo 'SYNOPSIS:

  Dotgit is an easy-to-use and versatile dotfiles manager. It allows for a wide
  range of setups with features like encryption and especially support for
  multiple hosts. You can link dotfiles of two hosts together or keep them
  separated, all with an intuitive filelist. Dotgit does all the dirty work
  involving git, allowing you to use dotgit even though you have no idea how git
  works. For those of you who are seasoned git veterans, dotgit won'\''t impair
  your power. Dotgit works with a single repo with no extra frills and a simple
  file hierarchy, allowing you to wield your git powers without limits.

INITIAL SETUP:

  To make a new dotgit repository first create your online repository, and then
  clone it onto your target host (git clone {repo_url} {repo_dest}). Go into
  your repository and then run dotgit init inside of it. The repository will
  then be ready to be used with dotgit.

  If you already have a dotgit repository and would like to use it on another
  host, simply clone the repository onto the target host and the repository will
  be ready to use with dotgit.

Filelist syntax:
  .bashrc             --  Will be in "common" folder and will be restored to
                          home folder, regardless of hostname (unless category
                          is specified)
  .vimrc:host1,host2  --  Will only be restored if hostname of machine matches
                          "host1" or "host2"
  .vimrc:host3        --  Will be kept seperate from .vimrc above and will only
                          be restored on host3
  .xinitrc:category1  --  When category1 is specified as category only files
                          with category1 suffix will be restored (or backed up)
                          (also excludes common folder)

  Categories and host use exactly the same syntax. This also means that you can
  specify a file to belong to multiple categories (and keep them synced)
  Comments are indicated with a # at the begining of the line, inline comments
  are not supported.

  After making any changes to the filelist you should run dotgit update, commit
  and push your changes and then run dotgit restore on all other hosts you use
  This ensures that the symlinking hierarchy stays up-to-date

  Different filelists:

  filelist: Main filelist
  cryptlist: Files to be encrypted
  dir_filelist: Directory list
  dir_cryptlist: Directories to be encrypted

USING COPYING INSTEAD OF SYMLINKING:
  If you prefer not to use symlinks in your home dir (eg. if the repo will not
  live on on the host or because of special filesystem setups) you have two
  options. If you only want to copy the dotfiles once you can use the "hard"
  versions of the various operations described below. If you want a long-term
  solution simply add a file named "hard" to the root of your dotgit repo (file
  can be empty). This will cause dotgit to simply invoke the "hard" versions of
  the operation automatically when using their normal couterparts (eg "dotgit
  restore" will now be equivalent to "dotgit hard-restore"). To see what
  operations will be affected by this option see below.

ENCRYPTION:
  AES (PGP default symmetric encryption algorithm) encryption is supported by
  dotgit in both symlinking and "hard" mode. To set up encryption just put the
  relevant filenames in the "cryptlist" file in the root of the dotgit repo. The
  "cryptlist" file uses exactly the same syntax as the normal filelist.

  Unlike with the unencrypted files encrypted files can'\''t be updated in the
  repository automatically like the normal symlinks. They first need to be
  encrypted before they can be committed and pushed to a remote. Because of this
  when linking or copying the dotfiles to your home dir the encrypted files will
  first be decrypted and then put in the "dmz" folder of dotgit. Inside this
  folder they are decrypted and these files will be linked into your home dir.
  When you wan'\''t to commit your changes to the repository these files will
  have to be encrypted first and then copied back into the repository. Automatic
  decryption can be done with git hooks, so when you do a '\''git pull'\'' the
  new files will be decrypted automatically. New files will also be
  automatically encrypted when you run '\''dotgit generate'\''.

  NOTE: When cloning a dotgit repo, you will first need to run '\''dotgit
  init'\'' inside the repo to set up the git hooks as they cannot be stored
  inside the repo when pushed to a remote.

DIRECTORY SUPPORT:
  Due to the fact that dotgit cannot possibly know beforehand which files will
  be present in a directory dotgit'\''s support for directories are not quite as
  versatile as its support for files. Currently dotgit creates a pseudo filelist
  from the files present the directory. This means the following applies: Should
  you run '\''dotgit update'\'' ALL the files you want in the repo should be
  present inside the dir you specified (either links to the repo or the files
  themselves). This is unlike normal files for dotgit where partial updates are
  possible. Any files not present in the dir but present in the repo will be
  deleted from the repo. The same goes for "hard" version of the update
  operation.

  Apart from the previously mentioned limitation all the normal features works
  with directories as well.

UNSAFE MODE:
  Extensive checks are made during the startup of dotgit. These checks along
  with password hashing (needed to check validity of passwords) can take a lot
  of time on low-powered devices. These checks can be disabled by creating a
  file named "unsafe" in the root directory of your dotfiles repository. Be
  aware that this can have unintended side-effects as it is then possible to
  create conflicts between the encrypted and normal files if duplicates occur.
  There is also the possibility of encrypting your files with inconsistent
  passwords. This can lead to partial decryption of your dotfiles leaving the
  job of manually decrypting the files with GPG up to you.

OPTIONS:

  Usage: dotgit [option] (optional args)

  If an argument is passed to the relevant functions only files pertaining to
  that category or hostname will be taken into account (if an argument is
  supplied the "common" files will also be ignored)

  update (arg)        --  If new files are added to the filelist, copy them to
                          the repository and set up links in home folder
                          If any changes are made to the filelist you should run
                          dotgit with the update option to keep symlinks
                          up-to-date. DO NOT USE THIS IF YOU'\''RE JUST GOING TO
                          RESTORE YOUR FILES. See the "restore" option made for
                          this purpose.
                          "Hard" option - Will copy files into repository and
                          leave the files in the home dir intact.

  restore (arg)       --  Set up links in home folder to repository. You will be
                          prompted before overwriting normal files, but symlinks
                          will be automatically overwritten
                          "Hard" option - Same as hard-restore.

  generate            --  Encrypt necessary files, generate a commit message,
                          commit changes and push to remote.

  hard-restore (arg)  --  Make a copy from the dotgit repository into home dir
                          NOTE: This will overwrite existing files without
                          confirmation

  passwd              --  If no password has been set, set new password. If
                          there is already a password set, change password

  encrypt             --  Encrypt all files currently in the dmz folder and put
                          them in the dotfiles folder. This is neccesary when
                          changes were made to files that are stored encrypted
                          in the repo. This needs to be run if you are making
                          commits manually but not if you use the "generate"
                          operation. See "generate" for details.

  decrypt             --  Decrypt all encrypted files in the repository. If the
                          local "dmz" version differs from the decrypted version
                          you will be given a choice of which file to keep

  clean               --  Delete all links in your home dir that refers to this
                          dotgit repo

  init                --  Initialize current folder with new dotgit repo or if
                          it is already initialized as a dotgit repo, setup git
                          hooks that will automatically decrypt files after a
                          git pull or merge

  diff                --  Show what files changed from previous commit in dotgit
                          repository

  help                --  Show this message' | less
}

[ !$DG_START ] && echo "Do not source this directly, it is used by dotgit"
