#! /bin/bash

# Dotgit is an easy-to-use and effective way to backup all your dotfiles and
# manage them in a repository

# Developer: Kobus van Schoor

REPO="$PWD"
DOTFILES=""
DMZ=""

DG_H=$(dirname "$(readlink -f "$0")")/dotgit_headers

source "$DG_H/files"
source "$DG_H/help"
source "$DG_H/init"
source "$DG_H/prompts"
source "$DG_H/security"
source "$DG_H/update"
source "$DG_H/restore"
source "$DG_H/clean"
source "$DG_H/info"

function init
{
	echo "Initializing dotgit repo..."
	if [ ! -d "$REPO/.git" ]; then git init; fi
	touch filelist
	touch cryptlist
	touch dir_filelist
	touch dir_cryptlist

	ignore=0
	if [ -f "$REPO/.gitignore" ]; then
		if ! grep -q "dmz" "$REPO/.gitignore"; then
			ignore=1
		fi
	else
		ignore=1
	fi

	if [ $ignore -eq 1 ]; then
		echo "dmz" >> .gitignore
		echo "tmp" >> .gitignore
		echo "mid" >> .gitignore
		echo "unsafe" >> .gitignore
	fi

	create=0
	if [ -f "$REPO/.git/hooks/post-merge" ]; then
		if ! grep -q "dotgit decrypt" "$REPO/.git/hooks/post-merge"; then
			create=1
		fi
	else
		create=1
	fi

	if [ $create -eq 1 ]; then
		echo "Creating encryption hooks..."
		echo "exec < /dev/tty" >> .git/hooks/post-merge
		echo "dotgit decrypt" >> .git/hooks/post-merge
		chmod +x .git/hooks/post-merge
	fi

	mkdir -p $REPO/dotfiles
	mkdir -p $REPO/dmz

	echo "Initialized dotgit repo in $PWD"
}

function ext
{
	# IFS=$PIFS
	if [ -f "$REPO/tmp" ]; then
		rm "$REPO/tmp"
	fi
	stty sane

	if [ -z "$1" ]; then
		exit 1
	else
		exit $1
	fi
}

if [[ $# -eq 0 ]]; then
	phelp;
	exit;
fi;

if [[ $1 != "init" ]]; then cfilelist "$1" "$2"; fi
safeguards $1

trap ext SIGINT

case "$1" in
	"update")update "$2";;
	"restore")restore "$2";;
	"generate")generate;;
	"hard-restore")hardrestore "$2";;
	"init")init;;
	"encrypt")encrypt;;
	"decrypt")decrypt;;
	"clean")cleanhome;;
	"passwd")passwd;;
	"diff")pdiff;;
	"help")phelp;;
	*)echo -e "$1 is not a valid argument."; exit 1;;
esac;

ext 0
